security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        users: 
            entity:
                class: App\Entity\User
                property: 'id'
        admins:
            entity:
                class: App\Entity\AdminUser
                property: 'email'
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        admin:
            stateless: false
            pattern: ^/admin
            login_throttling: true
            #                limiter: limiter.admin_login_limiter
            form_login:
                login_path: admin_login
                check_path: admin_login
            provider: admins
            logout:
                path: admin_logout
        main:
            lazy: true
            access_token:
                token_handler: App\Security\ApiTokenHandler
            stateless: true
            provider: users

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/_profiler, roles: PUBLIC_ACCESS }
        - { path: ^/api/docs, roles: PUBLIC_ACCESS }
        - { path: ^/login, roles: PUBLIC_ACCESS }
        - { path: ^/oauth/connect, roles: PUBLIC_ACCESS }
        - { path: ^/admin/login, roles: PUBLIC_ACCESS }
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/webhook, roles: PUBLIC_ACCESS }
        - { path: ^/poll/.*/download-marbles, roles: PUBLIC_ACCESS }
        - { path: ^/api/polls/, roles: PUBLIC_ACCESS, methods: ['GET'] }
        - { path: ^/api/poll_options/, roles: PUBLIC_ACCESS, methods: ['GET'] }
        - { path: ^/api/media-object/, roles: PUBLIC_ACCESS, methods: ['GET'] }
        - { path: ^/, roles: ROLE_USER }


when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
